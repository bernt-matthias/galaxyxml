import logging
import xml.etree.ElementTree as ET
import galaxyxml.tool as gxt
import galaxyxml.tool.parameters as gxtp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class GalaxyXmlParser(object):
    """
    Class to import content from an existing Galaxy XML wrapper.
    """

    def _init_tool(self, xml_root):
        """
        Init tool from existing xml tool.

        :param xml_root: root of the galaxy xml file.
        :type xml_root: :class:`xml.etree._Element`
        """
        name = xml_root.attrib['name']
        tool_id = xml_root.attrib['id']
        version = xml_root.attrib['version']
        for child in xml_root:
            if child.tag == 'description':
                description = child.text
                break
        for child in xml_root:
            if child.tag == 'command':
                exe = child.text.split()[0]
                command = child.text
                break

        tool = gxt.Tool(name, tool_id, version, description, exe)
        tool.command = command
        return tool

    def _load_description(self, tool, desc_root):
        """
        <description> is already loaded during initiation.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param desc_root: root of description tag.
        :type desc_root: :class:`xml.etree._Element`
        """
        logger.info("<description> is loaded during initiation of the object.")

    def _load_stdio(self, tool, stdio_root):
        """
        So far, <stdio> is automatically generated by galaxyxml.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param desc_root: root of stdio tag.
        :type desc_root: :class:`xml.etree._Element`
        """
        logger.info("<stdio> is not loaded but automatically generated by galaxyxml.")

    def _load_command(self, tool, desc_root):
        """
        <command> is already loaded during initiation.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param desc_root: root of command tag.
        :type desc_root: :class:`xml.etree._Element`
        """
        logger.info("<command> is loaded during initiation of the object.")

    def _load_help(self, tool, help_root):
        """
        load the content of the help into the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param requirements_root: root of help tag.
        :type requirements_root: :class:`xml.etree._Element`
        """
        tool.help = help_root.text

    def _load_requirements(self, tool, requirements_root):
        """
        Add requirements to the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param requirements_root: root of requirements tag.
        :type requirements_root: :class:`xml.etree._Element`
        """
        tool.requirements = gxtp.Requirements()
        for req in requirements_root:
            req_type = req.attrib['type']
            value = req.text
            if req.tag == 'requirement':
                version = req.attrib.get('version', None)
                tool.requirements.append(gxtp.Requirement(req_type, value, version=version))
            elif req.tag == 'container':
                tool.requirements.append(gxtp.Container(req_type, value))
            else:
                logger.warning(req.tag + ' is not a valid tag for requirements child')

    def _load_edam_topics(self, tool, topics_root):
        """
        Add edam_topics to the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param topics_root: root of edam_topics tag.
        :type topics_root: :class:`xml.etree._Element`
        """
        tool.edam_topics = gxtp.EdamTopics()
        for edam_topic in topics_root:
            tool.edam_topics.append(gxtp.EdamTopic(edam_topic.text))

    def _load_edam_operations(self, tool, operations_root):
        """
        Add edam_operations to the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param operations_root: root of edam_operations tag.
        :type operations_root: :class:`xml.etree._Element`
        """
        tool.edam_operations = gxtp.EdamOperations()
        for edam_op in operations_root:
            tool.edam_operations.append(gxtp.EdamOperation(edam_op.text))

    def _load_configfiles(self, tool, configfiles_root):
        """
        Add citations to the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param configfiles_root: root of citations tag.
        :type configfiles_root: :class:`xml.etree._Element`
        """
        tool.configfiles = gxtp.Configfiles()
        for conf in configfiles_root:
            name = conf.attrib['name']
            value = conf.text
            tool.configfiles.append(gxtp.Configfile(name, value))

    def _load_citations(self, tool, citations_root):
        """
        Add citations to the tool.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param citations_root: root of citations tag.
        :type citations_root: :class:`xml.etree._Element`
        """
        tool.citations = gxtp.Citations()
        for cit in citations_root:
            cit_type = cit.attrib['type']
            value = cit.text
            tool.citations.append(gxtp.Citation(cit_type, value))

    def _load_inputs(self, tool, inputs_root):
        """
        Add inputs to the tool using the :class:`galaxyxml.tool.import_xml.InputsParser` object.

        :param tool: Tool object from galaxyxml.
        :type tool: :class:`galaxyxml.tool.Tool`
        :param inputs_root: root of inputs tag.
        :type inputs_root: :class:`xml.etree._Element`
        """
        tool.inputs = gxtp.Inputs()
        inp_parser = InputsParser()
        inp_parser.load_inputs(tool.inputs, inputs_root)

    def import_xml(self, xml_path):
        """
        Load existing xml into the :class:`galaxyxml.tool.Tool` object.

        :param xml_path: Path of the XML to be loaded.
        :type xml_path: STRING
        :return: XML content in the galaxyxml model.
        :rtype: :class:`galaxyxml.tool.Tool`
        """
        xml_root = ET.parse(xml_path).getroot()
        tool = self._init_tool(xml_root)
        # Now we import each tag's field
        for child in xml_root:
            try:
                getattr(self, '_load_{}'.format(child.tag))(tool, child)
            except AttributeError:
                logger.warning(child.tag + " tag is not processed.")
        return tool


class InputsParser(object):
    """
    Class to parse content of the inputs tag from a Galaxy XML wrapper.
    """

    def _load_text_param(self, root, text_param):
        """
        Add <param type='text'> to the root.

        :param root: root to append param to.
        :param text_param: root of param tag.
        :type text_param: :class:`xml.etree._Element`
        """
        root.append(gxtp.TextParam(text_param.attrib['name'],
                                   optional=text_param.get('optional', None),
                                   label=text_param.get('label', None),
                                   help=text_param.get('help', None),
                                   size=text_param.get('size', None),
                                   area=text_param.get('area', False),
                                   value=text_param.get('value', None)))

    def _load_data_param(self, root, data_param):
        """
        Add <param type='data'> to the tool.

        :param data_param: root of param tag.
        :type data_param: :class:`xml.etree._Element`
        :return: Data param object instantiated.
        :rtype: :class:`galaxyxml.tool.parameters.DataParam`
        """
        name = data_param.attrib['name']
        optional = data_param.attrib.get('optional', None)
        label = data_param.attrib.get('label', None)
        inp_help = data_param.attrib.get('help', None)
        inp_format = data_param.attrib.get('format', None)
        multiple = data_param.attrib.get('multiple', None)
        root.append(gxtp.DataParam(name, optional=optional, label=label,
                                   help=inp_help, format=inp_format,
                                   multiple=multiple))

    def _load_boolean_param(self, root, bool_param):
        """
        Create boolean param from its xml root.

        :param bool_param: root of param tag.
        :type bool_param: :class:`xml.etree._Element`
        """
        name = bool_param.attrib['name']
        optional = bool_param.attrib.get('optional', None)
        label = bool_param.attrib.get('label', None)
        inp_help = bool_param.attrib.get('help', None)
        checked = bool_param.attrib.get('checked', False)
        truevalue = bool_param.attrib.get('truevalue', None)
        falsevalue = bool_param.attrib.get('falsevalue', None)
        root.append(gxtp.BooleanParam(name, optional=optional, label=label, help=inp_help,
                    checked=checked, truevalue=truevalue, falsevalue=falsevalue))

    def _load_integer_param(self, root, int_param):
        """
        Create integer param from its xml root.

        :param int_param: root of param tag.
        :type int_param: :class:`xml.etree._Element`
        """
        name = int_param.attrib['name']
        value = int_param.attrib.get('value', None)
        optional = int_param.attrib.get('optional', None)
        label = int_param.attrib.get('label', None)
        inp_help = int_param.attrib.get('help', None)
        param_min = int_param.attrib.get('min', False)
        param_max = int_param.attrib.get('max', None)
        root.append(gxtp.IntegerParam(name, value, optional=optional, label=label,
                                      help=inp_help, min=param_min, max=param_max))

    def _load_float_param(self, root, float_param):
        """
        Create float param from its xml root.

        :param float_param: root of param tag.
        :type float_param: :class:`xml.etree._Element`
        """
        name = float_param.attrib['name']
        value = float_param.attrib.get('value', None)
        optional = float_param.attrib.get('optional', None)
        label = float_param.attrib.get('label', None)
        inp_help = float_param.attrib.get('help', None)
        param_min = float_param.attrib.get('min', False)
        param_max = float_param.attrib.get('max', None)
        root.append(gxtp.FloatParam(name, value, optional=optional, label=label,
                                    help=inp_help, min=param_min, max=param_max))

    def _load_option_select(self, root, option):
        root.append(gxtp.SelectOption(option.attrib.get('value', None),
                                      option.text,
                                      selected=option.attrib.get('selected', False)))

    def _load_column_options(self, root, select):
        root.append(gxtp.Column(select.attrib['name'], select.attrib['index']))

    def _load_filter_options(self, root, filter):
        root.append(gxtp.Filter(filter.attrib['type'],
                                column=filter.attrib.get('column', None),
                                name=filter.attrib.get('name', None),
                                ref=filter.attrib.get('ref', None),
                                key=filter.attrib.get('key', None),
                                multiple=filter.attrib.get('multiple', None),
                                separator=filter.attrib.get('separator', None),
                                keep=filter.attrib.get('keep', None),
                                value=filter.attrib.get('value', None),
                                ref_attribute=filter.attrib.get('ref_attribute', None),
                                index=filter.attrib.get('index', None)))

    def _load_options_select(self, root, options):
        opts = gxtp.Options(from_dataset=options.attrib.get('from_dataset', None),
                            from_file=options.attrib.get('from_file', None),
                            from_data_table=options.attrib.get('from_data_table', None),
                            from_parameter=options.attrib.get('from_parameter', None))
        for opt_child in options:
            try:
                getattr(self, '_load_{}_options'.format(opt_child.tag))(opts, opt_child)
            except AttributeError:
                logger.warning(opt_child.tag + " tag is not processed for <options>.")
        root.append(opts)

    def _load_select_param(self, root, sel_param):
        """
        Create :class:`galaxyxml.tool.parameters.SelectParam` from its xml root.

        :param sel_param: root of param type='select' tag.
        :type sel_param: :class:`xml.etree._Element`
        """
        name = sel_param.attrib['name']
        optional = sel_param.attrib.get('optional', None)
        label = sel_param.attrib.get('label', None)
        inp_help = sel_param.attrib.get('help', None)
        data_ref = sel_param.attrib.get('data_ref', None)
        display = sel_param.attrib.get('display', None)
        multiple = sel_param.attrib.get('multiple', None)
        select_param = gxtp.SelectParam(name, optional=optional, label=label, help=inp_help,
                                        data_ref=data_ref, display=display, multiple=multiple)
        # TODO: handle options too and not only option
        for sel_child in sel_param:
            try:
                getattr(self, '_load_{}_select'.format(sel_child.tag))(select_param, sel_child)
            except AttributeError:
                logger.warning(sel_child.tag + " tag is not processed for <param type='select'>")
        root.append(select_param)

    def _load_param(self, root, param_root):
        """
        Method to select which type of param is being added to the root.

        :param root: root to attach param to.
        :param param_root: root of param tag.
        :type param_root: :class:`xml.etree._Element`
        """
        param_type = param_root.attrib['type']
        try:
            getattr(self, '_load_{}_param'.format(param_type))(root, param_root)
        except AttributeError:
            logger.warning(param_type + " tag is not processed for <param>.")

    def _load_when(self, root, when_root):
        """
        Add when to the root.

        :param root: root to append when to.
        :param when_root: root of when tag.
        :type when_root: :class:`xml.etree._Element`
        """
        when = gxtp.When(when_root.attrib['value'])
        self.load_inputs(when, when_root)
        root.append(when)

    def _load_conditional(self, root, conditional_root):
        """
        Add conditional to the root.

        :param root: root to append conditional to.
        :param conditional_root: root of conditional tag.
        :type conditional_root: :class:`xml.etree._Element`
        """
        name = conditional_root.attrib['name']
        value_from = conditional_root.attrib.get('value_from', None)
        value_ref = conditional_root.attrib.get('value_ref', None)
        value_ref_in_group = conditional_root.attrib.get('value_ref_in_group', None)
        label = conditional_root.attrib.get('label', None)
        # Other optional parameters need to be added to conditional object
        conditional = gxtp.Conditional(name, value_from=value_from, value_ref=value_ref,
                                       value_ref_in_group=value_ref_in_group, label=label)
        for cond_child in conditional_root:
            try:
                getattr(self, '_load_{}'.format(cond_child.tag))(conditional, cond_child)
            except AttributeError:
                logger.warning(cond_child.tag + " tag is not processed for <conditional>.")
        root.append(conditional)

    def _load_section(self, root, section_root):
        """
        Add section to the root.

        :param root: root to append conditional to.
        :param section_root: root of section tag.
        :type section_root: :class:`xml.etree._Element`
        """
        name = section_root.attrib['name']
        title = section_root.attrib['title']
        expanded = section_root.attrib.get('expanded', None)
        sec_help = section_root.attrib.get('help', None)
        section = gxtp.Section(name, title, expanded=expanded, sec_help=sec_help)
        for sec_child in section_root:
            try:
                getattr(self, '_load_{}'.format(sec_child.tag))(section, sec_child)
            except AttributeError:
                logger.warning(sec_child.tag + " tag is not processed for <section>.")
        root.append(section)

    def _load_repeat(self, root, repeat_root):
        """
        Add <repeat> to the root.

        :param root: root to append repeat to.
        :param repeat_root: root of <repeat> tag.
        :param repeat_root: :class:`xml.etree._Element`
        """
        repeat = gxtp.Repeat(repeat_root.attrib['name'],
                             repeat_root.attrib['title'],
                             min=repeat_root.attrib.get('min', None),
                             max=repeat_root.attrib.get('max', None),
                             default=repeat_root.attrib.get('default', None))
        for rep_child in repeat_root:
            try:
                getattr(self, '_load_{}'.format(rep_child.tag))(repeat, rep_child)
            except AttributeError:
                logger.warning(rep_child.tag + " tag is not processed for <repeat>.")
        root.append(repeat)

    def load_inputs(self, root, inputs_root):
        """
        Add inputs to the root.

        :param root: root to attach inputs to (either <inputs> or <when>).
        :param inputs_root: root of inputs tag.
        :type inputs_root: :class:`xml.etree._Element`
        """
        for inp_child in inputs_root:
            try:
                getattr(self, '_load_{}'.format(inp_child.tag))(root, inp_child)
            except AttributeError:
                logger.warning(inp_child.tag + " tag is not processed for <inputs>.")
